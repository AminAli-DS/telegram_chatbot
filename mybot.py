import telebot
from telebot import types
import requests
import random
import emoji

# –¢–æ–∫–µ–Ω —ñ API –∫–ª—é—á—ñ
TOKEN = '6693729475:AAHlTQfNjNkwN6vYLhM67qiK473-Klwb5g0'
API_KEY = 'b1826c6059192a67e00a4e541e90b1fb'
BASE_URL = 'https://api.themoviedb.org/3'
DEEZER_URL = 'https://api.deezer.com'
COUNTRY_CODE = 'UA'
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–Ω–∏–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—É –¥–ª—è —Ñ—ñ–ª—å–º—ñ–≤/—Å–µ—Ä—ñ–∞–ª—ñ–≤
GENRE_TRANSLATION = {
    'Action': '–ï–∫—à–Ω',
    'Adventure': '–ü—Ä–∏–≥–æ–¥–∏',
    'Animation': '–ê–Ω—ñ–º–∞—Ü—ñ—è',
    'Comedy': '–ö–æ–º–µ–¥—ñ—è',
    'Crime': '–ö—Ä–∏–º—ñ–Ω–∞–ª',
    'Documentary': '–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π',
    'Drama': '–î—Ä–∞–º–∞',
    'Family': '–°—ñ–º–µ–π–Ω–∏–π',
    'Fantasy': '–§–µ–Ω—Ç–µ–∑—ñ',
    'History': '–Ü—Å—Ç–æ—Ä–∏—á–Ω–∏–π',
    'Horror': '–ñ–∞—Ö–∏',
    'Music': '–ú—É–∑–∏–∫–∞',
    'Mystery': '–î–µ—Ç–µ–∫—Ç–∏–≤',
    'Romance': '–†–æ–º–∞–Ω—Ç–∏–∫–∞',
    'Science Fiction': '–ù–∞—É–∫–æ–≤–∞ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
    'TV Movie': '–¢–µ–ª–µ–≤—ñ–∑—ñ–π–Ω–∏–π —Ñ—ñ–ª—å–º',
    'Thriller': '–¢—Ä–∏–ª–µ—Ä',
    'War': '–í—ñ–π–Ω–∞',
    'Western': '–í–µ—Å—Ç–µ—Ä–Ω',
    'Action & Adventure': '–ï–∫—à–Ω —Ç–∞ –ø—Ä–∏–≥–æ–¥–∏',
    'Kids': '–î–∏—Ç—è—á—ñ',
    'News': '–ù–æ–≤–∏–Ω–∏',
    'Reality': '–†–µ–∞–ª—ñ—Ç—ñ',
    'Sci-Fi & Fantasy': '–ù–∞—É–∫–æ–≤–∞ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ —Ç–∞ —Ñ–µ–Ω—Ç–µ–∑—ñ',
    'Soap': '–°–µ—Ä—ñ–∞–ª–∏',
    'Talk': '–¢–æ–∫-—à–æ—É',
    'War & Politics': '–í—ñ–π–Ω–∞ —Ç–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞'
}



# –§—É–Ω–∫—Ü—ñ—ó
def get_movie_genres():
    url = f'{BASE_URL}/genre/movie/list?api_key={API_KEY}&language=en-US'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return {
            genre['id']: GENRE_TRANSLATION.get(
                genre['name'],
                genre['name']) for genre in data['genres']}
    else:
        return {}


def get_movies_by_genre(genre_id):
    url = f'{BASE_URL}/discover/movie?api_key={API_KEY}&language=en-US&sort_by=popularity.desc&page=1&with_genres={genre_id}'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return [movie['title'] for movie in data['results']][:5]
    else:
        return ["–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö"]


def get_tv_genres():
    url = f'{BASE_URL}/genre/tv/list?api_key={API_KEY}&language=en-US'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return {
            genre['id']: GENRE_TRANSLATION.get(
                genre['name'],
                genre['name']) for genre in data['genres']}
    else:
        return {}


def get_tv_by_genre(genre_id):
    url = f'{BASE_URL}/discover/tv?api_key={API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres={genre_id}'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return [tv['name'] for tv in data['results']][:5]
    else:
        return ["–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö"]


def get_music_genres():
    response = requests.get(f'{DEEZER_URL}/genre')
    if response.status_code == 200:
        return {genre['id']: genre['name']
                for genre in response.json()['data']}
    else:
        return {}


def get_songs_by_genre(genre_id):
    response = requests.get(
        f'{DEEZER_URL}/genre/{genre_id}/artists?country={COUNTRY_CODE}')
    if response.status_code == 200:
        return [song['name']
                for song in response.json()['data']][:5]
    else:
        return ["–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö"]


def determine_winner(user_choice, bot_choice):
    if user_choice == bot_choice:
        return '–ù—ñ—á–∏—è!'
    elif (user_choice == 'rock' and bot_choice == 'scissors') or \
         (user_choice == 'scissors' and bot_choice == 'paper') or \
         (user_choice == 'paper' and bot_choice == 'rock'):
        return '–í–∏ –≤–∏–≥—Ä–∞–ª–∏!'
    else:
        return '–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!'


def load_jokes_from_file(filename):
    with open(filename, 'r', encoding='utf-8') as file:
        return [line.strip() for line in file.readlines() if line.strip()]


JOKES = load_jokes_from_file("/Users/aminali/Documents/–∞–Ω–µ–∫–¥–æ—Ç–∏.txt")


def get_random_joke():
    return random.choice(JOKES)


def get_random_quote():
    url = 'https://api.quotable.io/random'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return f'"{data["content"]}" - {data["author"]}'
    else:
        return "–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü–∏—Ç–∞—Ç–∏"


# –ö–æ–º–∞–Ω–¥–∞ /start, –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    itembtn1 = types.InlineKeyboardButton(
        emoji.emojize("üé¨ –§—ñ–ª—å–º–∏"), callback_data='btn1')
    itembtn2 = types.InlineKeyboardButton(
        emoji.emojize("üì∫ –°–µ—Ä—ñ–∞–ª–∏"), callback_data='btn2')
    itembtn3 = types.InlineKeyboardButton(
        emoji.emojize("üéµ –ú—É–∑–∏–∫–∞"), callback_data='btn3')
    itembtn4 = types.InlineKeyboardButton(
        emoji.emojize("üéÆ –Ü–≥—Ä–∏"), callback_data='btn4')
    itembtn5 = types.InlineKeyboardButton(
        emoji.emojize("üòÇ –ê–Ω–µ–∫–¥–æ—Ç–∏"), callback_data='btn5')
    itembtn6 = types.InlineKeyboardButton(
        emoji.emojize("üìñ –¶–∏—Ç–∞—Ç–∏"), callback_data='btn6')

    markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6)
    bot.send_message(message.chat.id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=markup)


# –û–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –∑ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == "btn1":
        movie_genres = get_movie_genres()
        markup = types.InlineKeyboardMarkup(row_width=2)
        for genre_id, genre_name in movie_genres.items():
            markup.add(
                types.InlineKeyboardButton(
                    genre_name,
                    callback_data=f'movie_genre_{genre_id}'))
        markup.add(
            types.InlineKeyboardButton(
                '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è',
                callback_data='main_menu'))
        bot.send_message(
            call.message.chat.id,
            "–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä —Ñ—ñ–ª—å–º—É:",
            reply_markup=markup)
    elif "movie_genre_" in call.data:
        genre_id = call.data.split('_')[2]
        movies = get_movies_by_genre(genre_id)
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è',
                callback_data='main_menu'))
        bot.send_message(
            call.message.chat.id,
            "\n".join(movies),
            reply_markup=markup)
    elif call.data == "btn2":
        tv_genres = get_tv_genres()
        markup = types.InlineKeyboardMarkup(row_width=2)
        for genre_id, genre_name in tv_genres.items():
            markup.add(
                types.InlineKeyboardButton(
                    genre_name,
                    callback_data=f'tv_genre_{genre_id}'))
        markup.add(
            types.InlineKeyboardButton(
                '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è',
                callback_data='main_menu'))
        bot.send_message(
            call.message.chat.id,
            "–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä —Å–µ—Ä—ñ–∞–ª—É:",
            reply_markup=markup)
    elif "tv_genre_" in call.data:
        genre_id = call.data.split('_')[2]
        tv_shows = get_tv_by_genre(genre_id)
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è',
                callback_data='main_menu'))
        bot.send_message(
            call.message.chat.id,
            "\n".join(tv_shows),
            reply_markup=markup)
    elif call.data == "btn3":
        music_genres = get_music_genres()
        markup = types.InlineKeyboardMarkup(row_width=2)
        for genre_id, genre_name in music_genres.items():
            markup.add(
                types.InlineKeyboardButton(
                    genre_name,
                    callback_data=f'music_genre_{genre_id}'))
        markup.add(
            types.InlineKeyboardButton(
                '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è',
                callback_data='main_menu'))
        bot.send_message(
            call.message.chat.id,
            "–û–±–µ—Ä—ñ—Ç—å –º—É–∑–∏—á–Ω–∏–π –∂–∞–Ω—Ä:",
            reply_markup=markup)
    elif "music_genre_" in call.data:
        genre_id = call.data.split('_')[2]
        songs = get_songs_by_genre(genre_id)
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è',
                callback_data='main_menu'))
        bot.send_message(
            call.message.chat.id,
            "\n".join(songs),
            reply_markup=markup)

    elif call.data == "btn4":

        markup = types.InlineKeyboardMarkup(row_width=1)

        start_game_btn = types.InlineKeyboardButton(
            '–ö–∞–º—ñ–Ω—å-–Ω–æ–∂–∏—Ü—ñ-–ø–∞–ø—ñ—Ä', callback_data='rps_start')

        markup.add(start_game_btn)

        bot.send_message(
            call.message.chat.id,
            "–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É:",
            reply_markup=markup)

    elif call.data == 'rps_start':

        markup = types.InlineKeyboardMarkup(row_width=2)

        rock_btn = types.InlineKeyboardButton(
            '–ö–∞–º—ñ–Ω—å', callback_data='rps_rock')

        scissors_btn = types.InlineKeyboardButton(
            '–ù–æ–∂–∏—Ü—ñ', callback_data='rps_scissors')

        paper_btn = types.InlineKeyboardButton(
            '–ü–∞–ø—ñ—Ä', callback_data='rps_paper')

        markup.add(rock_btn, scissors_btn, paper_btn)

        bot.send_message(
            call.message.chat.id,
            "–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:",
            reply_markup=markup)

    elif call.data.startswith('rps_') and call.data != 'rps_start':

        user_choice = call.data.split('_')[1]

        bot_choice = random.choice(['rock', 'scissors', 'paper'])

        result = determine_winner(user_choice, bot_choice)

        bot_choice_translation = {

            'rock': '–ö–∞–º—ñ–Ω—å',

            'scissors': '–ù–æ–∂–∏—Ü—ñ',

            'paper': '–ü–∞–ø—ñ—Ä'

        }

        bot.send_message(
            call.message.chat.id,
            f"–í–∞—à –≤–∏–±—ñ—Ä: {bot_choice_translation[user_choice]}\n"
            f"–í–∏–±—ñ—Ä –±–æ—Ç–∞: {bot_choice_translation[bot_choice]}\n\n{result}")

    elif call.data == "btn5":

        joke = get_random_joke()

        markup = types.InlineKeyboardMarkup(row_width=2)

        markup.add(
            types.InlineKeyboardButton(
                '–©–µ –æ–¥–∏–Ω',
                callback_data='another_joke'))

        markup.add(
            types.InlineKeyboardButton(
                '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è',
                callback_data='main_menu'))

        bot.send_message(call.message.chat.id, joke, reply_markup=markup)

    elif call.data == "another_joke":
        joke = get_random_joke()
        markup = types.InlineKeyboardMarkup(row_width=2)

        markup.add(
            types.InlineKeyboardButton(
                '–©–µ –æ–¥–∏–Ω',
                callback_data='another_joke'))
        markup.add(
            types.InlineKeyboardButton(
                '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è',
                callback_data='main_menu'))

        bot.send_message(call.message.chat.id, joke, reply_markup=markup)

    elif call.data == "btn6":

        quote = get_random_quote()

        markup = types.InlineKeyboardMarkup(row_width=2)

        markup.add(
            types.InlineKeyboardButton(
                '–©–µ –æ–¥–Ω—É',
                callback_data='another_quote'))

        markup.add(
            types.InlineKeyboardButton(
                '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è',
                callback_data='main_menu'))

        bot.send_message(call.message.chat.id, quote, reply_markup=markup)

    elif call.data == "another_quote":
        quote = get_random_quote()
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton(
                '–©–µ –æ–¥–Ω—É',
                callback_data='another_quote'))
        markup.add(
            types.InlineKeyboardButton(
                '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è',
                callback_data='main_menu'))
        bot.send_message(call.message.chat.id, quote, reply_markup=markup)

    elif call.data == "main_menu":
        markup = types.InlineKeyboardMarkup(row_width=2)
        itembtn1 = types.InlineKeyboardButton(
            emoji.emojize("üé¨ –§—ñ–ª—å–º–∏"), callback_data='btn1')
        itembtn2 = types.InlineKeyboardButton(
            emoji.emojize("üì∫ –°–µ—Ä—ñ–∞–ª–∏"), callback_data='btn2')
        itembtn3 = types.InlineKeyboardButton(
            emoji.emojize("üéµ –ú—É–∑–∏–∫–∞"), callback_data='btn3')
        itembtn4 = types.InlineKeyboardButton(
            emoji.emojize("üéÆ –Ü–≥—Ä–∏"), callback_data='btn4')
        itembtn5 = types.InlineKeyboardButton(
            emoji.emojize("üòÇ –ê–Ω–µ–∫–¥–æ—Ç–∏"), callback_data='btn5')
        itembtn6 = types.InlineKeyboardButton(
            emoji.emojize("üìñ –¶–∏—Ç–∞—Ç–∏"), callback_data='btn6')

        markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6)
        bot.send_message(
            call.message.chat.id,
            "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=markup)


if __name__ == '__main__':
    bot.polling(none_stop=True)
